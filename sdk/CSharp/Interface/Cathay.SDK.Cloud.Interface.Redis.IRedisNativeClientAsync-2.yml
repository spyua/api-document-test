### YamlMime:ManagedReference
items:
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  commentId: T:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  id: IRedisNativeClientAsync`2
  parent: Cathay.SDK.Cloud.Interface.Redis
  children:
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.AppendAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DelAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExistsAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetBitAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HDelAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAllAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyFloatAsync(System.String,System.String,System.Double,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HKeysAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HLenAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HMGetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetNXAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HValsAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByFloatAsync(System.String,System.Double,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LIndexAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LInsertAsync(System.String,System.Boolean,System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LLenAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPopAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRemAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LSetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LTrimAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MGetAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetNXAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAsync(System.String,System.Int64,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PTtlAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PersistAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfCountAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfMergeAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.QuitAsync(System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPopAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RandomKeyAsync(System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameNXAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SCardAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffStoreAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SIsMemberAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMembersAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMoveAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync(System.String,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRandMemberAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRemAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetBitAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetRangeAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SortAsync(System.String,`0,`1)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.StrLenAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TtlAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TypeAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.UnWatchAsync(System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync(System.String[])
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCardAsync(System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCountAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZLexCountAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByLexAsync(System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRankAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByLexAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByRankAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRankAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZScoreAsync(System.String,System.String,System.Threading.CancellationToken)
  - Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IRedisNativeClientAsync<TOrder, TSortType>
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>
  type: Interface
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: IRedisNativeClientAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 2
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: 'public interface IRedisNativeClientAsync<TOrder, TSortType> : IAsyncDisposable where TOrder : Enum where TSortType : Enum'
    typeParameters:
    - id: TOrder
    - id: TSortType
    content.vb: Public Interface IRedisNativeClientAsync(Of TOrder As [Enum], TSortType As [Enum]) Inherits IAsyncDisposable
  inheritedMembers:
  - System.IAsyncDisposable.DisposeAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType)
  name.vb: IRedisNativeClientAsync(Of TOrder, TSortType)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.QuitAsync(System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.QuitAsync(System.Threading.CancellationToken)
  id: QuitAsync(System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: QuitAsync(CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.QuitAsync(CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.QuitAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: QuitAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 6
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask QuitAsync(CancellationToken token = default)
    parameters:
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function QuitAsync(token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.QuitAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).QuitAsync(CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).QuitAsync(System.Threading.CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TypeAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TypeAsync(System.String,System.Threading.CancellationToken)
  id: TypeAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: TypeAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.TypeAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.TypeAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: TypeAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 9
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> TypeAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function TypeAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TypeAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).TypeAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).TypeAsync(String, System.Threading.CancellationToken)
  name.vb: TypeAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExistsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExistsAsync(System.String,System.Threading.CancellationToken)
  id: ExistsAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ExistsAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ExistsAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ExistsAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ExistsAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 10
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> ExistsAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function ExistsAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExistsAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ExistsAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ExistsAsync(String, System.Threading.CancellationToken)
  name.vb: ExistsAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.StrLenAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.StrLenAsync(System.String,System.Threading.CancellationToken)
  id: StrLenAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: StrLenAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.StrLenAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.StrLenAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: StrLenAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 11
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> StrLenAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function StrLenAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.StrLenAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).StrLenAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).StrLenAsync(String, System.Threading.CancellationToken)
  name.vb: StrLenAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  id: SetAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SetAsync(string, string, long, long, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SetAsync(string, string, long, long, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SetAsync(string, string, long, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 12
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask SetAsync(string key, string value, long expirySeconds = 0, long expiryMilliseconds = 0, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.String
    - id: expirySeconds
      type: System.Int64
    - id: expiryMilliseconds
      type: System.Int64
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function SetAsync(key As String, value As String, expirySeconds As Long = 0, expiryMilliseconds As Long = 0, token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SetAsync(String, String, Long, Long, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SetAsync(String, String, Long, Long, System.Threading.CancellationToken)
  name.vb: SetAsync(String, String, Long, Long, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: SetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SetAsync(string, int, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SetAsync(string, int, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SetAsync(string, int, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 13
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask SetAsync(string key, int expireInSeconds, string value, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: expireInSeconds
      type: System.Int32
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function SetAsync(key As String, expireInSeconds As Integer, value As String, token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SetAsync(String, Integer, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SetAsync(String, Integer, String, System.Threading.CancellationToken)
  name.vb: SetAsync(String, Integer, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PersistAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PersistAsync(System.String,System.Threading.CancellationToken)
  id: PersistAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: PersistAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PersistAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PersistAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: PersistAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 14
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> PersistAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function PersistAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PersistAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PersistAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PersistAsync(String, System.Threading.CancellationToken)
  name.vb: PersistAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: MSetAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: MSetAsync(IEnumerable<string>, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.MSetAsync(IEnumerable<string>, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.MSetAsync(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: MSetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 15
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask MSetAsync(IEnumerable<string> keys, IEnumerable<string> values, CancellationToken token = default)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function MSetAsync(keys As IEnumerable(Of String), values As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).MSetAsync(IEnumerable(Of String), IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).MSetAsync(System.Collections.Generic.IEnumerable(Of String), System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: MSetAsync(IEnumerable(Of String), IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetNXAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetNXAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: MSetNXAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: MSetNXAsync(IEnumerable<string>, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.MSetNXAsync(IEnumerable<string>, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.MSetNXAsync(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: MSetNXAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 16
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> MSetNXAsync(IEnumerable<string> keys, IEnumerable<string> values, CancellationToken token = default)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function MSetNXAsync(keys As IEnumerable(Of String), values As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetNXAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).MSetNXAsync(IEnumerable(Of String), IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).MSetNXAsync(System.Collections.Generic.IEnumerable(Of String), System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: MSetNXAsync(IEnumerable(Of String), IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetAsync(System.String,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: GetAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.GetAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.GetAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: GetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 17
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> GetAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function GetAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).GetAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).GetAsync(String, System.Threading.CancellationToken)
  name.vb: GetAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MGetAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MGetAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: MGetAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: MGetAsync(IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.MGetAsync(IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.MGetAsync(System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: MGetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 18
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> MGetAsync(IEnumerable<string> keys, CancellationToken token = default)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function MGetAsync(keys As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MGetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).MGetAsync(IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).MGetAsync(System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: MGetAsync(IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DelAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DelAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: DelAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: DelAsync(IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.DelAsync(IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.DelAsync(System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: DelAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 19
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<List<bool>> DelAsync(IEnumerable<string> keys, CancellationToken token = default)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.List{System.Boolean}}
    content.vb: Function DelAsync(keys As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of List(Of Boolean))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DelAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).DelAsync(IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).DelAsync(System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: DelAsync(IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrAsync(System.String,System.Threading.CancellationToken)
  id: IncrAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: IncrAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.IncrAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.IncrAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: IncrAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 20
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> IncrAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function IncrAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).IncrAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).IncrAsync(String, System.Threading.CancellationToken)
  name.vb: IncrAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  id: IncrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: IncrByAsync(string, long, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.IncrByAsync(string, long, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.IncrByAsync(string, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: IncrByAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 21
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> IncrByAsync(string key, long incrBy, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: incrBy
      type: System.Int64
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function IncrByAsync(key As String, incrBy As Long, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).IncrByAsync(String, Long, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).IncrByAsync(String, Long, System.Threading.CancellationToken)
  name.vb: IncrByAsync(String, Long, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByFloatAsync(System.String,System.Double,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByFloatAsync(System.String,System.Double,System.Threading.CancellationToken)
  id: IncrByFloatAsync(System.String,System.Double,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: IncrByFloatAsync(string, double, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.IncrByFloatAsync(string, double, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.IncrByFloatAsync(string, double, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: IncrByFloatAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 22
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<double> IncrByFloatAsync(string key, double incrBy, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: incrBy
      type: System.Double
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Double}
    content.vb: Function IncrByFloatAsync(key As String, incrBy As Double, token As CancellationToken = Nothing) As ValueTask(Of Double)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByFloatAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).IncrByFloatAsync(String, Double, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).IncrByFloatAsync(String, Double, System.Threading.CancellationToken)
  name.vb: IncrByFloatAsync(String, Double, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrAsync(System.String,System.Threading.CancellationToken)
  id: DecrAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: DecrAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.DecrAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.DecrAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: DecrAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 23
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> DecrAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function DecrAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).DecrAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).DecrAsync(String, System.Threading.CancellationToken)
  name.vb: DecrAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  id: DecrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: DecrByAsync(string, long, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.DecrByAsync(string, long, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.DecrByAsync(string, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: DecrByAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 24
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> DecrByAsync(string key, long decrBy, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: decrBy
      type: System.Int64
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function DecrByAsync(key As String, decrBy As Long, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrByAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).DecrByAsync(String, Long, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).DecrByAsync(String, Long, System.Threading.CancellationToken)
  name.vb: DecrByAsync(String, Long, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.AppendAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.AppendAsync(System.String,System.String,System.Threading.CancellationToken)
  id: AppendAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: AppendAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.AppendAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.AppendAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: AppendAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 25
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> AppendAsync(string key, string value, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function AppendAsync(key As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.AppendAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).AppendAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).AppendAsync(String, String, System.Threading.CancellationToken)
  name.vb: AppendAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: GetRangeAsync(string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.GetRangeAsync(string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.GetRangeAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: GetRangeAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 26
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> GetRangeAsync(string key, int fromIndex, int toIndex, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: fromIndex
      type: System.Int32
    - id: toIndex
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function GetRangeAsync(key As String, fromIndex As Integer, toIndex As Integer, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetRangeAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).GetRangeAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).GetRangeAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetRangeAsync(String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetRangeAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetRangeAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: SetRangeAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SetRangeAsync(string, int, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SetRangeAsync(string, int, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SetRangeAsync(string, int, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SetRangeAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 27
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> SetRangeAsync(string key, int offset, string value, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: offset
      type: System.Int32
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function SetRangeAsync(key As String, offset As Integer, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetRangeAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SetRangeAsync(String, Integer, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SetRangeAsync(String, Integer, String, System.Threading.CancellationToken)
  name.vb: SetRangeAsync(String, Integer, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetBitAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetBitAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: GetBitAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: GetBitAsync(string, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.GetBitAsync(string, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.GetBitAsync(string, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: GetBitAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 28
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> GetBitAsync(string key, int offset, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: offset
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function GetBitAsync(key As String, offset As Integer, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetBitAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).GetBitAsync(String, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).GetBitAsync(String, Integer, System.Threading.CancellationToken)
  name.vb: GetBitAsync(String, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetBitAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetBitAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)
  id: SetBitAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SetBitAsync(string, int, bool, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SetBitAsync(string, int, bool, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SetBitAsync(string, int, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SetBitAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 29
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> SetBitAsync(string key, int offset, bool bit, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: offset
      type: System.Int32
    - id: bit
      type: System.Boolean
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function SetBitAsync(key As String, offset As Integer, bit As Boolean, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetBitAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SetBitAsync(String, Integer, Boolean, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SetBitAsync(String, Integer, Boolean, System.Threading.CancellationToken)
  name.vb: SetBitAsync(String, Integer, Boolean, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RandomKeyAsync(System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RandomKeyAsync(System.Threading.CancellationToken)
  id: RandomKeyAsync(System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: RandomKeyAsync(CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RandomKeyAsync(CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RandomKeyAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: RandomKeyAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 31
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> RandomKeyAsync(CancellationToken token = default)
    parameters:
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function RandomKeyAsync(token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RandomKeyAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RandomKeyAsync(CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RandomKeyAsync(System.Threading.CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RenameAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: RenameAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RenameAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RenameAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: RenameAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 32
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask RenameAsync(string oldKeyName, string newKeyName, CancellationToken token = default)
    parameters:
    - id: oldKeyName
      type: System.String
    - id: newKeyName
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function RenameAsync(oldKeyName As String, newKeyName As String, token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RenameAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RenameAsync(String, String, System.Threading.CancellationToken)
  name.vb: RenameAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameNXAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameNXAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RenameNXAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: RenameNXAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RenameNXAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RenameNXAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: RenameNXAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 33
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> RenameNXAsync(string oldKeyName, string newKeyName, CancellationToken token = default)
    parameters:
    - id: oldKeyName
      type: System.String
    - id: newKeyName
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function RenameNXAsync(oldKeyName As String, newKeyName As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameNXAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RenameNXAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RenameNXAsync(String, String, System.Threading.CancellationToken)
  name.vb: RenameNXAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: ExpireAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ExpireAsync(string, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ExpireAsync(string, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ExpireAsync(string, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ExpireAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 34
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> ExpireAsync(string key, int seconds, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: seconds
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function ExpireAsync(key As String, seconds As Integer, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ExpireAsync(String, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ExpireAsync(String, Integer, System.Threading.CancellationToken)
  name.vb: ExpireAsync(String, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAsync(System.String,System.Int64,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAsync(System.String,System.Int64,System.Threading.CancellationToken)
  id: PExpireAsync(System.String,System.Int64,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: PExpireAsync(string, long, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PExpireAsync(string, long, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PExpireAsync(string, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: PExpireAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 35
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> PExpireAsync(string key, long ttlMs, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: ttlMs
      type: System.Int64
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function PExpireAsync(key As String, ttlMs As Long, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PExpireAsync(String, Long, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PExpireAsync(String, Long, System.Threading.CancellationToken)
  name.vb: PExpireAsync(String, Long, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  id: ExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ExpireAtAsync(string, long, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ExpireAtAsync(string, long, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ExpireAtAsync(string, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ExpireAtAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 36
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> ExpireAtAsync(string key, long unixTime, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: unixTime
      type: System.Int64
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function ExpireAtAsync(key As String, unixTime As Long, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAtAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ExpireAtAsync(String, Long, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ExpireAtAsync(String, Long, System.Threading.CancellationToken)
  name.vb: ExpireAtAsync(String, Long, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  id: PExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: PExpireAtAsync(string, long, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PExpireAtAsync(string, long, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PExpireAtAsync(string, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: PExpireAtAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 37
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> PExpireAtAsync(string key, long unixTimeMs, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: unixTimeMs
      type: System.Int64
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function PExpireAtAsync(key As String, unixTimeMs As Long, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAtAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PExpireAtAsync(String, Long, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PExpireAtAsync(String, Long, System.Threading.CancellationToken)
  name.vb: PExpireAtAsync(String, Long, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TtlAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TtlAsync(System.String,System.Threading.CancellationToken)
  id: TtlAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: TtlAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.TtlAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.TtlAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: TtlAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 38
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> TtlAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function TtlAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TtlAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).TtlAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).TtlAsync(String, System.Threading.CancellationToken)
  name.vb: TtlAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PTtlAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PTtlAsync(System.String,System.Threading.CancellationToken)
  id: PTtlAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: PTtlAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PTtlAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PTtlAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: PTtlAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 39
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> PTtlAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function PTtlAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PTtlAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PTtlAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PTtlAsync(String, System.Threading.CancellationToken)
  name.vb: PTtlAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: PfAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: PfAddAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PfAddAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PfAddAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: PfAddAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 42
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> PfAddAsync(string key, IEnumerable<string> elements, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: elements
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function PfAddAsync(key As String, elements As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfAddAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PfAddAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PfAddAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: PfAddAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfCountAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfCountAsync(System.String,System.Threading.CancellationToken)
  id: PfCountAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: PfCountAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PfCountAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PfCountAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: PfCountAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 43
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> PfCountAsync(string key, CancellationToken token = default)
    parameters:
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function PfCountAsync(key As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfCountAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PfCountAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PfCountAsync(String, System.Threading.CancellationToken)
  name.vb: PfCountAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfMergeAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfMergeAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: PfMergeAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: PfMergeAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PfMergeAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PfMergeAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: PfMergeAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 44
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask PfMergeAsync(string toKeyId, IEnumerable<string> fromKeys, CancellationToken token = default)
    parameters:
    - id: toKeyId
      type: System.String
    - id: fromKeys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function PfMergeAsync(toKeyId As String, fromKeys As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfMergeAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PfMergeAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PfMergeAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: PfMergeAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SortAsync(System.String,`0,`1)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SortAsync(System.String,`0,`1)
  id: SortAsync(System.String,`0,`1)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SortAsync(string, TOrder, TSortType)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SortAsync(string, TOrder, TSortType)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SortAsync(string, TOrder, TSortType)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SortAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 47
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> SortAsync(string listOrSetId, TOrder order = default, TSortType sortType = default)
    parameters:
    - id: listOrSetId
      type: System.String
    - id: order
      type: '{TOrder}'
    - id: sortType
      type: '{TSortType}'
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function SortAsync(listOrSetId As String, order As TOrder = Nothing, sortType As TSortType = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SortAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SortAsync(String, TOrder, TSortType)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SortAsync(String, TOrder, TSortType)
  name.vb: SortAsync(String, TOrder, TSortType)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: LRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LRangeAsync(string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LRangeAsync(string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LRangeAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LRangeAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 50
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> LRangeAsync(string listId, int startingFrom, int endingAt, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: startingFrom
      type: System.Int32
    - id: endingAt
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function LRangeAsync(listId As String, startingFrom As Integer, endingAt As Integer, token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRangeAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LRangeAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LRangeAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: LRangeAsync(String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RPushAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: RPushAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RPushAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RPushAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: RPushAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 51
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> RPushAsync(string listId, string value, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function RPushAsync(listId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RPushAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RPushAsync(String, String, System.Threading.CancellationToken)
  name.vb: RPushAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: RPushXAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RPushXAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RPushXAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: RPushXAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 52
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> RPushXAsync(string listId, string value, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function RPushXAsync(listId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushXAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RPushXAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RPushXAsync(String, String, System.Threading.CancellationToken)
  name.vb: RPushXAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushAsync(System.String,System.String,System.Threading.CancellationToken)
  id: LPushAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LPushAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LPushAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LPushAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LPushAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 53
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> LPushAsync(string listId, string value, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function LPushAsync(listId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LPushAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LPushAsync(String, String, System.Threading.CancellationToken)
  name.vb: LPushAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  id: LPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LPushXAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LPushXAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LPushXAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LPushXAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 54
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> LPushXAsync(string listId, string value, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function LPushXAsync(listId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushXAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LPushXAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LPushXAsync(String, String, System.Threading.CancellationToken)
  name.vb: LPushXAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LTrimAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LTrimAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: LTrimAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LTrimAsync(string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LTrimAsync(string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LTrimAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LTrimAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 55
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask LTrimAsync(string listId, int keepStartingFrom, int keepEndingAt, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: keepStartingFrom
      type: System.Int32
    - id: keepEndingAt
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function LTrimAsync(listId As String, keepStartingFrom As Integer, keepEndingAt As Integer, token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LTrimAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LTrimAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LTrimAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: LTrimAsync(String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRemAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRemAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: LRemAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LRemAsync(string, int, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LRemAsync(string, int, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LRemAsync(string, int, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LRemAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 56
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> LRemAsync(string listId, int removeNoOfMatches, string value, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: removeNoOfMatches
      type: System.Int32
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function LRemAsync(listId As String, removeNoOfMatches As Integer, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRemAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LRemAsync(String, Integer, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LRemAsync(String, Integer, String, System.Threading.CancellationToken)
  name.vb: LRemAsync(String, Integer, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LLenAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LLenAsync(System.String,System.Threading.CancellationToken)
  id: LLenAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LLenAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LLenAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LLenAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LLenAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 57
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> LLenAsync(string listId, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function LLenAsync(listId As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LLenAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LLenAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LLenAsync(String, System.Threading.CancellationToken)
  name.vb: LLenAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LIndexAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LIndexAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: LIndexAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LIndexAsync(string, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LIndexAsync(string, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LIndexAsync(string, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LIndexAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 58
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> LIndexAsync(string listId, int listIndex, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: listIndex
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function LIndexAsync(listId As String, listIndex As Integer, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LIndexAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LIndexAsync(String, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LIndexAsync(String, Integer, System.Threading.CancellationToken)
  name.vb: LIndexAsync(String, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LInsertAsync(System.String,System.Boolean,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LInsertAsync(System.String,System.Boolean,System.String,System.String,System.Threading.CancellationToken)
  id: LInsertAsync(System.String,System.Boolean,System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LInsertAsync(string, bool, string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LInsertAsync(string, bool, string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LInsertAsync(string, bool, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LInsertAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 59
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask LInsertAsync(string listId, bool insertBefore, string pivot, string value, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: insertBefore
      type: System.Boolean
    - id: pivot
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function LInsertAsync(listId As String, insertBefore As Boolean, pivot As String, value As String, token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LInsertAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LInsertAsync(String, Boolean, String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LInsertAsync(String, Boolean, String, String, System.Threading.CancellationToken)
  name.vb: LInsertAsync(String, Boolean, String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LSetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LSetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  id: LSetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LSetAsync(string, int, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LSetAsync(string, int, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LSetAsync(string, int, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LSetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 60
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask LSetAsync(string listId, int listIndex, string value, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: listIndex
      type: System.Int32
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function LSetAsync(listId As String, listIndex As Integer, value As String, token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LSetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LSetAsync(String, Integer, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LSetAsync(String, Integer, String, System.Threading.CancellationToken)
  name.vb: LSetAsync(String, Integer, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPopAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPopAsync(System.String,System.Threading.CancellationToken)
  id: LPopAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: LPopAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LPopAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LPopAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: LPopAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 61
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> LPopAsync(string listId, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function LPopAsync(listId As String, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPopAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LPopAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LPopAsync(String, System.Threading.CancellationToken)
  name.vb: LPopAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPopAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPopAsync(System.String,System.Threading.CancellationToken)
  id: RPopAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: RPopAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RPopAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RPopAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: RPopAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 62
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> RPopAsync(string listId, CancellationToken token = default)
    parameters:
    - id: listId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function RPopAsync(listId As String, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPopAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RPopAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RPopAsync(String, System.Threading.CancellationToken)
  name.vb: RPopAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMembersAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMembersAsync(System.String,System.Threading.CancellationToken)
  id: SMembersAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SMembersAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SMembersAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SMembersAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SMembersAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 71
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> SMembersAsync(string setId, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function SMembersAsync(setId As String, token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMembersAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SMembersAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SMembersAsync(String, System.Threading.CancellationToken)
  name.vb: SMembersAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync(System.String,System.String,System.Threading.CancellationToken)
  id: SAddAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SAddAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SAddAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SAddAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SAddAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 72
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> SAddAsync(string setId, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function SAddAsync(setId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SAddAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SAddAsync(String, String, System.Threading.CancellationToken)
  name.vb: SAddAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: SAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SAddAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SAddAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SAddAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SAddAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 73
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> SAddAsync(string setId, IEnumerable<string> value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: value
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function SAddAsync(setId As String, value As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SAddAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SAddAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: SAddAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRemAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRemAsync(System.String,System.String,System.Threading.CancellationToken)
  id: SRemAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SRemAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SRemAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SRemAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SRemAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 74
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> SRemAsync(string setId, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function SRemAsync(setId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRemAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SRemAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SRemAsync(String, String, System.Threading.CancellationToken)
  name.vb: SRemAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync(System.String,System.Threading.CancellationToken)
  id: SPopAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SPopAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SPopAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SPopAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SPopAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 75
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> SPopAsync(string setId, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function SPopAsync(setId As String, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SPopAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SPopAsync(String, System.Threading.CancellationToken)
  name.vb: SPopAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync(System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync(System.String,System.Int32,System.Threading.CancellationToken)
  id: SPopAsync(System.String,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SPopAsync(string, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SPopAsync(string, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SPopAsync(string, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SPopAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 76
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> SPopAsync(string setId, int count, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: count
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function SPopAsync(setId As String, count As Integer, token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SPopAsync(String, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SPopAsync(String, Integer, System.Threading.CancellationToken)
  name.vb: SPopAsync(String, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMoveAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMoveAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: SMoveAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SMoveAsync(string, string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SMoveAsync(string, string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SMoveAsync(string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SMoveAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 77
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> SMoveAsync(string fromSetId, string toSetId, string value, CancellationToken token = default)
    parameters:
    - id: fromSetId
      type: System.String
    - id: toSetId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function SMoveAsync(fromSetId As String, toSetId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMoveAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SMoveAsync(String, String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SMoveAsync(String, String, String, System.Threading.CancellationToken)
  name.vb: SMoveAsync(String, String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SCardAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SCardAsync(System.String,System.Threading.CancellationToken)
  id: SCardAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SCardAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SCardAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SCardAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SCardAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 78
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> SCardAsync(string setId, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function SCardAsync(setId As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SCardAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SCardAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SCardAsync(String, System.Threading.CancellationToken)
  name.vb: SCardAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SIsMemberAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SIsMemberAsync(System.String,System.String,System.Threading.CancellationToken)
  id: SIsMemberAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SIsMemberAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SIsMemberAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SIsMemberAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SIsMemberAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 79
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> SIsMemberAsync(string setId, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function SIsMemberAsync(setId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SIsMemberAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SIsMemberAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SIsMemberAsync(String, String, System.Threading.CancellationToken)
  name.vb: SIsMemberAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: SInterAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SInterAsync(IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SInterAsync(IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SInterAsync(System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SInterAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 80
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> SInterAsync(IEnumerable<string> setIds, CancellationToken token = default)
    parameters:
    - id: setIds
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function SInterAsync(setIds As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SInterAsync(IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SInterAsync(System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: SInterAsync(IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: SInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SInterStoreAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SInterStoreAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SInterStoreAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SInterStoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 81
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask SInterStoreAsync(string intoSetId, IEnumerable<string> setIds, CancellationToken token = default)
    parameters:
    - id: intoSetId
      type: System.String
    - id: setIds
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function SInterStoreAsync(intoSetId As String, setIds As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterStoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SInterStoreAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SInterStoreAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: SInterStoreAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: SUnionAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SUnionAsync(IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SUnionAsync(IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SUnionAsync(System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SUnionAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 82
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> SUnionAsync(IEnumerable<string> setIds, CancellationToken token = default)
    parameters:
    - id: setIds
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function SUnionAsync(setIds As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SUnionAsync(IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SUnionAsync(System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: SUnionAsync(IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: SUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SUnionStoreAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SUnionStoreAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SUnionStoreAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SUnionStoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 83
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask SUnionStoreAsync(string intoSetId, IEnumerable<string> setIds, CancellationToken token = default)
    parameters:
    - id: intoSetId
      type: System.String
    - id: setIds
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function SUnionStoreAsync(intoSetId As String, setIds As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionStoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SUnionStoreAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SUnionStoreAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: SUnionStoreAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: SDiffAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SDiffAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SDiffAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SDiffAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SDiffAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 84
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> SDiffAsync(string fromSetId, IEnumerable<string> withSetIds, CancellationToken token = default)
    parameters:
    - id: fromSetId
      type: System.String
    - id: withSetIds
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function SDiffAsync(fromSetId As String, withSetIds As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SDiffAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SDiffAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: SDiffAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffStoreAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffStoreAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: SDiffStoreAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SDiffStoreAsync(string, string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SDiffStoreAsync(string, string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SDiffStoreAsync(string, string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SDiffStoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 85
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask SDiffStoreAsync(string intoSetId, string fromSetId, IEnumerable<string> withSetIds, CancellationToken token = default)
    parameters:
    - id: intoSetId
      type: System.String
    - id: fromSetId
      type: System.String
    - id: withSetIds
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function SDiffStoreAsync(intoSetId As String, fromSetId As String, withSetIds As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffStoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SDiffStoreAsync(String, String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SDiffStoreAsync(String, String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: SDiffStoreAsync(String, String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRandMemberAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRandMemberAsync(System.String,System.Threading.CancellationToken)
  id: SRandMemberAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: SRandMemberAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SRandMemberAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SRandMemberAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: SRandMemberAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 86
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> SRandMemberAsync(string setId, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function SRandMemberAsync(setId As String, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRandMemberAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SRandMemberAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SRandMemberAsync(String, System.Threading.CancellationToken)
  name.vb: SRandMemberAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  id: ZAddAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZAddAsync(string, double, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZAddAsync(string, double, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZAddAsync(string, double, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZAddAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 90
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> ZAddAsync(string setId, double score, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: score
      type: System.Double
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function ZAddAsync(setId As String, score As Double, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZAddAsync(String, Double, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZAddAsync(String, Double, String, System.Threading.CancellationToken)
  name.vb: ZAddAsync(String, Double, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)
  id: ZAddAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZAddAsync(string, long, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZAddAsync(string, long, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZAddAsync(string, long, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZAddAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 91
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> ZAddAsync(string setId, long score, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: score
      type: System.Int64
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function ZAddAsync(setId As String, score As Long, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZAddAsync(String, Long, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZAddAsync(String, Long, String, System.Threading.CancellationToken)
  name.vb: ZAddAsync(String, Long, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync(System.String,System.String,System.Threading.CancellationToken)
  id: ZRemAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRemAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRemAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 92
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> ZRemAsync(string setId, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function ZRemAsync(setId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemAsync(String, String, System.Threading.CancellationToken)
  name.vb: ZRemAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: ZRemAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRemAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRemAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 93
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZRemAsync(string setId, IEnumerable<string> values, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZRemAsync(setId As String, values As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: ZRemAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  id: ZIncrByAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZIncrByAsync(string, double, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZIncrByAsync(string, double, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZIncrByAsync(string, double, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZIncrByAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 94
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<double> ZIncrByAsync(string setId, double incrBy, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: incrBy
      type: System.Double
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Double}
    content.vb: Function ZIncrByAsync(setId As String, incrBy As Double, value As String, token As CancellationToken = Nothing) As ValueTask(Of Double)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZIncrByAsync(String, Double, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZIncrByAsync(String, Double, String, System.Threading.CancellationToken)
  name.vb: ZIncrByAsync(String, Double, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)
  id: ZIncrByAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZIncrByAsync(string, long, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZIncrByAsync(string, long, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZIncrByAsync(string, long, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZIncrByAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 95
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<double> ZIncrByAsync(string setId, long incrBy, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: incrBy
      type: System.Int64
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Double}
    content.vb: Function ZIncrByAsync(setId As String, incrBy As Long, value As String, token As CancellationToken = Nothing) As ValueTask(Of Double)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZIncrByAsync(String, Long, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZIncrByAsync(String, Long, String, System.Threading.CancellationToken)
  name.vb: ZIncrByAsync(String, Long, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRankAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRankAsync(System.String,System.String,System.Threading.CancellationToken)
  id: ZRankAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRankAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRankAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRankAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRankAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 96
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZRankAsync(string setId, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZRankAsync(setId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRankAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRankAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRankAsync(String, String, System.Threading.CancellationToken)
  name.vb: ZRankAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRankAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRankAsync(System.String,System.String,System.Threading.CancellationToken)
  id: ZRevRankAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRevRankAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRankAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRankAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRevRankAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 97
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZRevRankAsync(string setId, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZRevRankAsync(setId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRankAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRankAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRankAsync(String, String, System.Threading.CancellationToken)
  name.vb: ZRevRankAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRangeAsync(string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeAsync(string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRangeAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 98
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<string>> ZRangeAsync(string setId, int min, int max, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
    content.vb: Function ZRangeAsync(setId As String, min As Integer, max As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of String))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRangeAsync(String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRangeWithScoresAsync(string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeWithScoresAsync(string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeWithScoresAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRangeWithScoresAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 99
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<CSortedSetResult>> ZRangeWithScoresAsync(string setId, int min, int max, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult}}
    content.vb: Function ZRangeWithScoresAsync(setId As String, min As Integer, max As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of CSortedSetResult))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeWithScoresAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeWithScoresAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeWithScoresAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRangeWithScoresAsync(String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRevRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRevRangeAsync(string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeAsync(string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRevRangeAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 100
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<string>> ZRevRangeAsync(string setId, int min, int max, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
    content.vb: Function ZRevRangeAsync(setId As String, min As Integer, max As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of String))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRevRangeAsync(String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRevRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRevRangeWithScoresAsync(string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeWithScoresAsync(string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeWithScoresAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRevRangeWithScoresAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 101
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<CSortedSetResult>> ZRevRangeWithScoresAsync(string setId, int min, int max, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult}}
    content.vb: Function ZRevRangeWithScoresAsync(setId As String, min As Integer, max As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of CSortedSetResult))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeWithScoresAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeWithScoresAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeWithScoresAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRevRangeWithScoresAsync(String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRangeByScoreAsync(string, double, double, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreAsync(string, double, double, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreAsync(string, double, double, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRangeByScoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 102
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<string>> ZRangeByScoreAsync(string setId, double min, double max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
    content.vb: Function ZRangeByScoreAsync(setId As String, min As Double, max As Double, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of String))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreAsync(String, Double, Double, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreAsync(String, Double, Double, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRangeByScoreAsync(String, Double, Double, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRangeByScoreAsync(string, long, long, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreAsync(string, long, long, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreAsync(string, long, long, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRangeByScoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 103
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<string>> ZRangeByScoreAsync(string setId, long min, long max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int64
    - id: max
      type: System.Int64
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
    content.vb: Function ZRangeByScoreAsync(setId As String, min As Long, max As Long, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of String))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreAsync(String, Long, Long, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreAsync(String, Long, Long, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRangeByScoreAsync(String, Long, Long, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRangeByScoreWithScoresAsync(string, double, double, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreWithScoresAsync(string, double, double, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreWithScoresAsync(string, double, double, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRangeByScoreWithScoresAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 104
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<CSortedSetResult>> ZRangeByScoreWithScoresAsync(string setId, double min, double max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult}}
    content.vb: Function ZRangeByScoreWithScoresAsync(setId As String, min As Double, max As Double, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of CSortedSetResult))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreWithScoresAsync(String, Double, Double, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreWithScoresAsync(String, Double, Double, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRangeByScoreWithScoresAsync(String, Double, Double, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRangeByScoreWithScoresAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRangeByScoreWithScoresAsync(string, long, long, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreWithScoresAsync(string, long, long, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreWithScoresAsync(string, long, long, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRangeByScoreWithScoresAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 105
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<CSortedSetResult>> ZRangeByScoreWithScoresAsync(string setId, long min, long max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int64
    - id: max
      type: System.Int64
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult}}
    content.vb: Function ZRangeByScoreWithScoresAsync(setId As String, min As Long, max As Long, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of CSortedSetResult))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreWithScoresAsync(String, Long, Long, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreWithScoresAsync(String, Long, Long, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRangeByScoreWithScoresAsync(String, Long, Long, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRevRangeByScoreAsync(string, double, double, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreAsync(string, double, double, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreAsync(string, double, double, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRevRangeByScoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 106
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<string>> ZRevRangeByScoreAsync(string setId, double min, double max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
    content.vb: Function ZRevRangeByScoreAsync(setId As String, min As Double, max As Double, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of String))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreAsync(String, Double, Double, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreAsync(String, Double, Double, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRevRangeByScoreAsync(String, Double, Double, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRevRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRevRangeByScoreAsync(string, long, long, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreAsync(string, long, long, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreAsync(string, long, long, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRevRangeByScoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 107
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<string>> ZRevRangeByScoreAsync(string setId, long min, long max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int64
    - id: max
      type: System.Int64
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
    content.vb: Function ZRevRangeByScoreAsync(setId As String, min As Long, max As Long, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of String))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreAsync(String, Long, Long, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreAsync(String, Long, Long, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRevRangeByScoreAsync(String, Long, Long, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRevRangeByScoreWithScoresAsync(string, double, double, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreWithScoresAsync(string, double, double, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreWithScoresAsync(string, double, double, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRevRangeByScoreWithScoresAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 108
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<CSortedSetResult>> ZRevRangeByScoreWithScoresAsync(string setId, double min, double max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult}}
    content.vb: Function ZRevRangeByScoreWithScoresAsync(setId As String, min As Double, max As Double, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of CSortedSetResult))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreWithScoresAsync(String, Double, Double, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreWithScoresAsync(String, Double, Double, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRevRangeByScoreWithScoresAsync(String, Double, Double, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRevRangeByScoreWithScoresAsync(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRevRangeByScoreWithScoresAsync(string, long, long, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreWithScoresAsync(string, long, long, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreWithScoresAsync(string, long, long, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRevRangeByScoreWithScoresAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 109
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<CSortedSetResult>> ZRevRangeByScoreWithScoresAsync(string setId, long min, long max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int64
    - id: max
      type: System.Int64
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult}}
    content.vb: Function ZRevRangeByScoreWithScoresAsync(setId As String, min As Long, max As Long, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of CSortedSetResult))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreWithScoresAsync(String, Long, Long, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreWithScoresAsync(String, Long, Long, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRevRangeByScoreWithScoresAsync(String, Long, Long, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByRankAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByRankAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRemRangeByRankAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRemRangeByRankAsync(string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByRankAsync(string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByRankAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRemRangeByRankAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 110
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZRemRangeByRankAsync(string setId, int min, int max, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZRemRangeByRankAsync(setId As String, min As Integer, max As Integer, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByRankAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByRankAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByRankAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRemRangeByRankAsync(String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  id: ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRemRangeByScoreAsync(string, double, double, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByScoreAsync(string, double, double, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByScoreAsync(string, double, double, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRemRangeByScoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 111
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZRemRangeByScoreAsync(string setId, double fromScore, double toScore, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: fromScore
      type: System.Double
    - id: toScore
      type: System.Double
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZRemRangeByScoreAsync(setId As String, fromScore As Double, toScore As Double, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByScoreAsync(String, Double, Double, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByScoreAsync(String, Double, Double, System.Threading.CancellationToken)
  name.vb: ZRemRangeByScoreAsync(String, Double, Double, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  id: ZRemRangeByScoreAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRemRangeByScoreAsync(string, long, long, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByScoreAsync(string, long, long, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByScoreAsync(string, long, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRemRangeByScoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 112
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZRemRangeByScoreAsync(string setId, long fromScore, long toScore, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: fromScore
      type: System.Int64
    - id: toScore
      type: System.Int64
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZRemRangeByScoreAsync(setId As String, fromScore As Long, toScore As Long, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByScoreAsync(String, Long, Long, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByScoreAsync(String, Long, Long, System.Threading.CancellationToken)
  name.vb: ZRemRangeByScoreAsync(String, Long, Long, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCardAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCardAsync(System.String,System.Threading.CancellationToken)
  id: ZCardAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZCardAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZCardAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZCardAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZCardAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 113
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZCardAsync(string setId, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZCardAsync(setId As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCardAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZCardAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZCardAsync(String, System.Threading.CancellationToken)
  name.vb: ZCardAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCountAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCountAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  id: ZCountAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZCountAsync(string, double, double, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZCountAsync(string, double, double, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZCountAsync(string, double, double, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZCountAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 114
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZCountAsync(string setId, double min, double max, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZCountAsync(setId As String, min As Double, max As Double, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCountAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZCountAsync(String, Double, Double, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZCountAsync(String, Double, Double, System.Threading.CancellationToken)
  name.vb: ZCountAsync(String, Double, Double, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZScoreAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZScoreAsync(System.String,System.String,System.Threading.CancellationToken)
  id: ZScoreAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZScoreAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZScoreAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZScoreAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZScoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 115
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<double> ZScoreAsync(string setId, string value, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Double}
    content.vb: Function ZScoreAsync(setId As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Double)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZScoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZScoreAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZScoreAsync(String, String, System.Threading.CancellationToken)
  name.vb: ZScoreAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: ZUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZUnionStoreAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZUnionStoreAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZUnionStoreAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZUnionStoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 116
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZUnionStoreAsync(string intoSetId, IEnumerable<string> setIds, CancellationToken token = default)
    parameters:
    - id: intoSetId
      type: System.String
    - id: setIds
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZUnionStoreAsync(intoSetId As String, setIds As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZUnionStoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZUnionStoreAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZUnionStoreAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: ZUnionStoreAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: ZInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZInterStoreAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZInterStoreAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZInterStoreAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZInterStoreAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 118
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZInterStoreAsync(string intoSetId, IEnumerable<string> setIds, CancellationToken token = default)
    parameters:
    - id: intoSetId
      type: System.String
    - id: setIds
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZInterStoreAsync(intoSetId As String, setIds As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZInterStoreAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZInterStoreAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZInterStoreAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: ZInterStoreAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByLexAsync(System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByLexAsync(System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ZRangeByLexAsync(System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRangeByLexAsync(string, string, string, int, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByLexAsync(string, string, string, int, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByLexAsync(string, string, string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRangeByLexAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 120
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<string>> ZRangeByLexAsync(string setId, string min, string max, int skip, int take, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.String
    - id: max
      type: System.String
    - id: skip
      type: System.Int32
    - id: take
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
    content.vb: Function ZRangeByLexAsync(setId As String, min As String, max As String, skip As Integer, take As Integer, token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of String))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByLexAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByLexAsync(String, String, String, Integer, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByLexAsync(String, String, String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: ZRangeByLexAsync(String, String, String, Integer, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZLexCountAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZLexCountAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: ZLexCountAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZLexCountAsync(string, string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZLexCountAsync(string, string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZLexCountAsync(string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZLexCountAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 121
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZLexCountAsync(string setId, string min, string max, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.String
    - id: max
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZLexCountAsync(setId As String, min As String, max As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZLexCountAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZLexCountAsync(String, String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZLexCountAsync(String, String, String, System.Threading.CancellationToken)
  name.vb: ZLexCountAsync(String, String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByLexAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByLexAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: ZRemRangeByLexAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: ZRemRangeByLexAsync(string, string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByLexAsync(string, string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByLexAsync(string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: ZRemRangeByLexAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 122
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> ZRemRangeByLexAsync(string setId, string min, string max, CancellationToken token = default)
    parameters:
    - id: setId
      type: System.String
    - id: min
      type: System.String
    - id: max
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function ZRemRangeByLexAsync(setId As String, min As String, max As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByLexAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByLexAsync(String, String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByLexAsync(String, String, String, System.Threading.CancellationToken)
  name.vb: ZRemRangeByLexAsync(String, String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: HSetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HSetAsync(string, string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HSetAsync(string, string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HSetAsync(string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HSetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 125
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> HSetAsync(string hashId, string key, string value, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: key
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function HSetAsync(hashId As String, key As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HSetAsync(String, String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HSetAsync(String, String, String, System.Threading.CancellationToken)
  name.vb: HSetAsync(String, String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: HSetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HSetAsync(string, IEnumerable<string>, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HSetAsync(string, IEnumerable<string>, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HSetAsync(string, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HSetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 126
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask HSetAsync(string hashId, IEnumerable<string> keys, IEnumerable<string> values, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function HSetAsync(hashId As String, keys As IEnumerable(Of String), values As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HSetAsync(String, IEnumerable(Of String), IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HSetAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: HSetAsync(String, IEnumerable(Of String), IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetNXAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetNXAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: HSetNXAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HSetNXAsync(string, string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HSetNXAsync(string, string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HSetNXAsync(string, string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HSetNXAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 127
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> HSetNXAsync(string hashId, string key, string value, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: key
      type: System.String
    - id: value
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function HSetNXAsync(hashId As String, key As String, value As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetNXAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HSetNXAsync(String, String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HSetNXAsync(String, String, String, System.Threading.CancellationToken)
  name.vb: HSetNXAsync(String, String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  id: HIncrbyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HIncrbyAsync(string, string, int, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HIncrbyAsync(string, string, int, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HIncrbyAsync(string, string, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HIncrbyAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 128
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> HIncrbyAsync(string hashId, string key, int incrementBy, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: key
      type: System.String
    - id: incrementBy
      type: System.Int32
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function HIncrbyAsync(hashId As String, key As String, incrementBy As Integer, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HIncrbyAsync(String, String, Integer, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HIncrbyAsync(String, String, Integer, System.Threading.CancellationToken)
  name.vb: HIncrbyAsync(String, String, Integer, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyFloatAsync(System.String,System.String,System.Double,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyFloatAsync(System.String,System.String,System.Double,System.Threading.CancellationToken)
  id: HIncrbyFloatAsync(System.String,System.String,System.Double,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HIncrbyFloatAsync(string, string, double, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HIncrbyFloatAsync(string, string, double, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HIncrbyFloatAsync(string, string, double, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HIncrbyFloatAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 129
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<double> HIncrbyFloatAsync(string hashId, string key, double incrementBy, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: key
      type: System.String
    - id: incrementBy
      type: System.Double
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Double}
    content.vb: Function HIncrbyFloatAsync(hashId As String, key As String, incrementBy As Double, token As CancellationToken = Nothing) As ValueTask(Of Double)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyFloatAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HIncrbyFloatAsync(String, String, Double, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HIncrbyFloatAsync(String, String, Double, System.Threading.CancellationToken)
  name.vb: HIncrbyFloatAsync(String, String, Double, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAsync(System.String,System.String,System.Threading.CancellationToken)
  id: HGetAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HGetAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HGetAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HGetAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HGetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 130
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string> HGetAsync(string hashId, string key, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String}
    content.vb: Function HGetAsync(hashId As String, key As String, token As CancellationToken = Nothing) As ValueTask(Of String)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HGetAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HGetAsync(String, String, System.Threading.CancellationToken)
  name.vb: HGetAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HMGetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HMGetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: HMGetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HMGetAsync(string, IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HMGetAsync(string, IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HMGetAsync(string, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HMGetAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 131
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<IEnumerable<string>> HMGetAsync(string hashId, IEnumerable<string> keysAndArgs, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: keysAndArgs
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
    content.vb: Function HMGetAsync(hashId As String, keysAndArgs As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask(Of IEnumerable(Of String))
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HMGetAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HMGetAsync(String, IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HMGetAsync(String, System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: HMGetAsync(String, IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HDelAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HDelAsync(System.String,System.String,System.Threading.CancellationToken)
  id: HDelAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HDelAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HDelAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HDelAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HDelAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 132
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> HDelAsync(string hashId, string key, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function HDelAsync(hashId As String, key As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HDelAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HDelAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HDelAsync(String, String, System.Threading.CancellationToken)
  name.vb: HDelAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  id: HExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HExistsAsync(string, string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HExistsAsync(string, string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HExistsAsync(string, string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HExistsAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 133
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<bool> HExistsAsync(string hashId, string key, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: key
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Boolean}
    content.vb: Function HExistsAsync(hashId As String, key As String, token As CancellationToken = Nothing) As ValueTask(Of Boolean)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HExistsAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HExistsAsync(String, String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HExistsAsync(String, String, System.Threading.CancellationToken)
  name.vb: HExistsAsync(String, String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HLenAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HLenAsync(System.String,System.Threading.CancellationToken)
  id: HLenAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HLenAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HLenAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HLenAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HLenAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 134
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<long> HLenAsync(string hashId, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Int64}
    content.vb: Function HLenAsync(hashId As String, token As CancellationToken = Nothing) As ValueTask(Of Long)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HLenAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HLenAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HLenAsync(String, System.Threading.CancellationToken)
  name.vb: HLenAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HKeysAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HKeysAsync(System.String,System.Threading.CancellationToken)
  id: HKeysAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HKeysAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HKeysAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HKeysAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HKeysAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 135
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> HKeysAsync(string hashId, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function HKeysAsync(hashId As String, token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HKeysAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HKeysAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HKeysAsync(String, System.Threading.CancellationToken)
  name.vb: HKeysAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HValsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HValsAsync(System.String,System.Threading.CancellationToken)
  id: HValsAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HValsAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HValsAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HValsAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HValsAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 136
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<string[]> HValsAsync(string hashId, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{System.String[]}
    content.vb: Function HValsAsync(hashId As String, token As CancellationToken = Nothing) As ValueTask(Of String())
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HValsAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HValsAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HValsAsync(String, System.Threading.CancellationToken)
  name.vb: HValsAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAllAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAllAsync(System.String,System.Threading.CancellationToken)
  id: HGetAllAsync(System.String,System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: HGetAllAsync(string, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HGetAllAsync(string, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HGetAllAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: HGetAllAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 137
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask<CHashEntry> HGetAllAsync(string hashId, CancellationToken token = default)
    parameters:
    - id: hashId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask{Cathay.SDK.Cloud.Interface.Redis.CHashEntry}
    content.vb: Function HGetAllAsync(hashId As String, token As CancellationToken = Nothing) As ValueTask(Of CHashEntry)
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAllAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HGetAllAsync(String, CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HGetAllAsync(String, System.Threading.CancellationToken)
  name.vb: HGetAllAsync(String, CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  id: WatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: WatchAsync(IEnumerable<string>, CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.WatchAsync(IEnumerable<string>, CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.WatchAsync(System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: WatchAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 140
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask WatchAsync(IEnumerable<string> keys, CancellationToken token = default)
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function WatchAsync(keys As IEnumerable(Of String), token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).WatchAsync(IEnumerable(Of String), CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).WatchAsync(System.Collections.Generic.IEnumerable(Of String), System.Threading.CancellationToken)
  name.vb: WatchAsync(IEnumerable(Of String), CancellationToken)
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync(System.String[])
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync(System.String[])
  id: WatchAsync(System.String[])
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: WatchAsync(params string[])
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.WatchAsync(params string[])
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.WatchAsync(params string[])
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: WatchAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 141
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask WatchAsync(params string[] keys)
    parameters:
    - id: keys
      type: System.String[]
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function WatchAsync(ParamArray keys As String()) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).WatchAsync(ParamArray String())
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).WatchAsync(ParamArray String())
  name.vb: WatchAsync(ParamArray String())
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.UnWatchAsync(System.Threading.CancellationToken)
  commentId: M:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.UnWatchAsync(System.Threading.CancellationToken)
  id: UnWatchAsync(System.Threading.CancellationToken)
  parent: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2
  langs:
  - csharp
  - vb
  name: UnWatchAsync(CancellationToken)
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.UnWatchAsync(CancellationToken)
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.UnWatchAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Redis/IRedisClientAsync.cs
      branch: main
      repo: https://github.com/Cathay-CADS/Cathay.SDK.Cloud.Interface.git
    id: UnWatchAsync
    path: ../Redis/IRedisClientAsync.cs
    startLine: 142
  assemblies:
  - Cathay.SDK.Cloud.Interface
  namespace: Cathay.SDK.Cloud.Interface.Redis
  syntax:
    content: ValueTask UnWatchAsync(CancellationToken token = default)
    parameters:
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Function UnWatchAsync(token As CancellationToken = Nothing) As ValueTask
  overload: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.UnWatchAsync*
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).UnWatchAsync(CancellationToken)
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).UnWatchAsync(System.Threading.CancellationToken)
references:
- uid: Cathay.SDK.Cloud.Interface.Redis
  commentId: N:Cathay.SDK.Cloud.Interface.Redis
  href: Cathay.html
  name: Cathay.SDK.Cloud.Interface.Redis
  nameWithType: Cathay.SDK.Cloud.Interface.Redis
  fullName: Cathay.SDK.Cloud.Interface.Redis
  spec.csharp:
  - uid: Cathay
    name: Cathay
    href: Cathay.html
  - name: .
  - uid: Cathay.SDK
    name: SDK
    href: Cathay.SDK.html
  - name: .
  - uid: Cathay.SDK.Cloud
    name: Cloud
    href: Cathay.SDK.Cloud.html
  - name: .
  - uid: Cathay.SDK.Cloud.Interface
    name: Interface
    href: Cathay.SDK.Cloud.Interface.html
  - name: .
  - uid: Cathay.SDK.Cloud.Interface.Redis
    name: Redis
    href: Cathay.SDK.Cloud.Interface.Redis.html
  spec.vb:
  - uid: Cathay
    name: Cathay
    href: Cathay.html
  - name: .
  - uid: Cathay.SDK
    name: SDK
    href: Cathay.SDK.html
  - name: .
  - uid: Cathay.SDK.Cloud
    name: Cloud
    href: Cathay.SDK.Cloud.html
  - name: .
  - uid: Cathay.SDK.Cloud.Interface
    name: Interface
    href: Cathay.SDK.Cloud.Interface.html
  - name: .
  - uid: Cathay.SDK.Cloud.Interface.Redis
    name: Redis
    href: Cathay.SDK.Cloud.Interface.Redis.html
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.QuitAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.QuitAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.QuitAsync(System.Threading.CancellationToken)
  name: QuitAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.QuitAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.QuitAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).QuitAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).QuitAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TypeAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TypeAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TypeAsync(System.String,System.Threading.CancellationToken)
  name: TypeAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.TypeAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.TypeAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).TypeAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).TypeAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.Tasks.ValueTask{System.String}
  commentId: T:System.Threading.Tasks.ValueTask{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<string>
  nameWithType: ValueTask<string>
  fullName: System.Threading.Tasks.ValueTask<string>
  nameWithType.vb: ValueTask(Of String)
  fullName.vb: System.Threading.Tasks.ValueTask(Of String)
  name.vb: ValueTask(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Threading.Tasks.ValueTask`1
  commentId: T:System.Threading.Tasks.ValueTask`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<TResult>
  nameWithType: ValueTask<TResult>
  fullName: System.Threading.Tasks.ValueTask<TResult>
  nameWithType.vb: ValueTask(Of TResult)
  fullName.vb: System.Threading.Tasks.ValueTask(Of TResult)
  name.vb: ValueTask(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExistsAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExistsAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExistsAsync(System.String,System.Threading.CancellationToken)
  name: ExistsAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ExistsAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ExistsAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ExistsAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ExistsAsync
- uid: System.Threading.Tasks.ValueTask{System.Boolean}
  commentId: T:System.Threading.Tasks.ValueTask{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<bool>
  nameWithType: ValueTask<bool>
  fullName: System.Threading.Tasks.ValueTask<bool>
  nameWithType.vb: ValueTask(Of Boolean)
  fullName.vb: System.Threading.Tasks.ValueTask(Of Boolean)
  name.vb: ValueTask(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.StrLenAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.StrLenAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.StrLenAsync(System.String,System.Threading.CancellationToken)
  name: StrLenAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.StrLenAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.StrLenAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).StrLenAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).StrLenAsync
- uid: System.Threading.Tasks.ValueTask{System.Int64}
  commentId: T:System.Threading.Tasks.ValueTask{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<long>
  nameWithType: ValueTask<long>
  fullName: System.Threading.Tasks.ValueTask<long>
  nameWithType.vb: ValueTask(Of Long)
  fullName.vb: System.Threading.Tasks.ValueTask(Of Long)
  name.vb: ValueTask(Of Long)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetAsync(System.String,System.String,System.Int64,System.Int64,System.Threading.CancellationToken)
  name: SetAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SetAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SetAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SetAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SetAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PersistAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PersistAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PersistAsync(System.String,System.Threading.CancellationToken)
  name: PersistAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PersistAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PersistAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PersistAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PersistAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: MSetAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.MSetAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.MSetAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).MSetAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).MSetAsync
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetNXAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetNXAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MSetNXAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: MSetNXAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.MSetNXAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.MSetNXAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).MSetNXAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).MSetNXAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetAsync(System.String,System.Threading.CancellationToken)
  name: GetAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.GetAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.GetAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).GetAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).GetAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MGetAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MGetAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.MGetAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: MGetAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.MGetAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.MGetAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).MGetAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).MGetAsync
- uid: System.Threading.Tasks.ValueTask{System.String[]}
  commentId: T:System.Threading.Tasks.ValueTask{System.String[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<string[]>
  nameWithType: ValueTask<string[]>
  fullName: System.Threading.Tasks.ValueTask<string[]>
  nameWithType.vb: ValueTask(Of String())
  fullName.vb: System.Threading.Tasks.ValueTask(Of String())
  name.vb: ValueTask(Of String())
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DelAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DelAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DelAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: DelAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.DelAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.DelAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).DelAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).DelAsync
- uid: System.Threading.Tasks.ValueTask{System.Collections.Generic.List{System.Boolean}}
  commentId: T:System.Threading.Tasks.ValueTask{System.Collections.Generic.List{System.Boolean}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<List<bool>>
  nameWithType: ValueTask<List<bool>>
  fullName: System.Threading.Tasks.ValueTask<System.Collections.Generic.List<bool>>
  nameWithType.vb: ValueTask(Of List(Of Boolean))
  fullName.vb: System.Threading.Tasks.ValueTask(Of System.Collections.Generic.List(Of Boolean))
  name.vb: ValueTask(Of List(Of Boolean))
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrAsync(System.String,System.Threading.CancellationToken)
  name: IncrAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.IncrAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.IncrAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).IncrAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).IncrAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  name: IncrByAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.IncrByAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.IncrByAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).IncrByAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).IncrByAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByFloatAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByFloatAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.IncrByFloatAsync(System.String,System.Double,System.Threading.CancellationToken)
  name: IncrByFloatAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.IncrByFloatAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.IncrByFloatAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).IncrByFloatAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).IncrByFloatAsync
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Threading.Tasks.ValueTask{System.Double}
  commentId: T:System.Threading.Tasks.ValueTask{System.Double}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<double>
  nameWithType: ValueTask<double>
  fullName: System.Threading.Tasks.ValueTask<double>
  nameWithType.vb: ValueTask(Of Double)
  fullName.vb: System.Threading.Tasks.ValueTask(Of Double)
  name.vb: ValueTask(Of Double)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrAsync(System.String,System.Threading.CancellationToken)
  name: DecrAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.DecrAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.DecrAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).DecrAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).DecrAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrByAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrByAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.DecrByAsync(System.String,System.Int64,System.Threading.CancellationToken)
  name: DecrByAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.DecrByAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.DecrByAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).DecrByAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).DecrByAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.AppendAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.AppendAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.AppendAsync(System.String,System.String,System.Threading.CancellationToken)
  name: AppendAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.AppendAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.AppendAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).AppendAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).AppendAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetRangeAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetRangeAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: GetRangeAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.GetRangeAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.GetRangeAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).GetRangeAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).GetRangeAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetRangeAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetRangeAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetRangeAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  name: SetRangeAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SetRangeAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SetRangeAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SetRangeAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SetRangeAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetBitAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetBitAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.GetBitAsync(System.String,System.Int32,System.Threading.CancellationToken)
  name: GetBitAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.GetBitAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.GetBitAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).GetBitAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).GetBitAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetBitAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetBitAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SetBitAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)
  name: SetBitAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SetBitAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SetBitAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SetBitAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SetBitAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RandomKeyAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RandomKeyAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RandomKeyAsync(System.Threading.CancellationToken)
  name: RandomKeyAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RandomKeyAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RandomKeyAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RandomKeyAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RandomKeyAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameAsync(System.String,System.String,System.Threading.CancellationToken)
  name: RenameAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RenameAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RenameAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RenameAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RenameAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameNXAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameNXAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RenameNXAsync(System.String,System.String,System.Threading.CancellationToken)
  name: RenameNXAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RenameNXAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RenameNXAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RenameNXAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RenameNXAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAsync(System.String,System.Int32,System.Threading.CancellationToken)
  name: ExpireAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ExpireAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ExpireAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ExpireAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ExpireAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAsync(System.String,System.Int64,System.Threading.CancellationToken)
  name: PExpireAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PExpireAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PExpireAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PExpireAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PExpireAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAtAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAtAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  name: ExpireAtAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ExpireAtAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ExpireAtAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ExpireAtAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ExpireAtAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAtAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAtAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PExpireAtAsync(System.String,System.Int64,System.Threading.CancellationToken)
  name: PExpireAtAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PExpireAtAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PExpireAtAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PExpireAtAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PExpireAtAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TtlAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TtlAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.TtlAsync(System.String,System.Threading.CancellationToken)
  name: TtlAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.TtlAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.TtlAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).TtlAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).TtlAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PTtlAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PTtlAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PTtlAsync(System.String,System.Threading.CancellationToken)
  name: PTtlAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PTtlAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PTtlAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PTtlAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PTtlAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfAddAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfAddAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfAddAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: PfAddAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PfAddAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PfAddAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PfAddAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PfAddAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfCountAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfCountAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfCountAsync(System.String,System.Threading.CancellationToken)
  name: PfCountAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PfCountAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PfCountAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PfCountAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PfCountAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfMergeAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfMergeAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.PfMergeAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: PfMergeAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.PfMergeAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.PfMergeAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).PfMergeAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).PfMergeAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SortAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SortAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SortAsync(System.String,`0,`1)
  name: SortAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SortAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SortAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SortAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SortAsync
- uid: '{TOrder}'
  commentId: '!:TOrder'
  definition: TOrder
  name: TOrder
  nameWithType: TOrder
  fullName: TOrder
- uid: '{TSortType}'
  commentId: '!:TSortType'
  definition: TSortType
  name: TSortType
  nameWithType: TSortType
  fullName: TSortType
- uid: TOrder
  name: TOrder
  nameWithType: TOrder
  fullName: TOrder
- uid: TSortType
  name: TSortType
  nameWithType: TSortType
  fullName: TSortType
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRangeAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRangeAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: LRangeAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LRangeAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LRangeAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LRangeAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LRangeAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushAsync(System.String,System.String,System.Threading.CancellationToken)
  name: RPushAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RPushAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RPushAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RPushAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RPushAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushXAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushXAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  name: RPushXAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RPushXAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RPushXAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RPushXAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RPushXAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushAsync(System.String,System.String,System.Threading.CancellationToken)
  name: LPushAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LPushAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LPushAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LPushAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LPushAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushXAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushXAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPushXAsync(System.String,System.String,System.Threading.CancellationToken)
  name: LPushXAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LPushXAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LPushXAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LPushXAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LPushXAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LTrimAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LTrimAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LTrimAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: LTrimAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LTrimAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LTrimAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LTrimAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LTrimAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRemAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRemAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LRemAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  name: LRemAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LRemAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LRemAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LRemAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LRemAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LLenAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LLenAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LLenAsync(System.String,System.Threading.CancellationToken)
  name: LLenAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LLenAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LLenAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LLenAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LLenAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LIndexAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LIndexAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LIndexAsync(System.String,System.Int32,System.Threading.CancellationToken)
  name: LIndexAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LIndexAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LIndexAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LIndexAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LIndexAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LInsertAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LInsertAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LInsertAsync(System.String,System.Boolean,System.String,System.String,System.Threading.CancellationToken)
  name: LInsertAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LInsertAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LInsertAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LInsertAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LInsertAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LSetAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LSetAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LSetAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)
  name: LSetAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LSetAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LSetAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LSetAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LSetAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPopAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPopAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.LPopAsync(System.String,System.Threading.CancellationToken)
  name: LPopAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.LPopAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.LPopAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).LPopAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).LPopAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPopAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPopAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.RPopAsync(System.String,System.Threading.CancellationToken)
  name: RPopAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.RPopAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.RPopAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).RPopAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).RPopAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMembersAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMembersAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMembersAsync(System.String,System.Threading.CancellationToken)
  name: SMembersAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SMembersAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SMembersAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SMembersAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SMembersAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SAddAsync(System.String,System.String,System.Threading.CancellationToken)
  name: SAddAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SAddAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SAddAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SAddAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SAddAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRemAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRemAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRemAsync(System.String,System.String,System.Threading.CancellationToken)
  name: SRemAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SRemAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SRemAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SRemAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SRemAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SPopAsync(System.String,System.Threading.CancellationToken)
  name: SPopAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SPopAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SPopAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SPopAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SPopAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMoveAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMoveAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SMoveAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name: SMoveAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SMoveAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SMoveAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SMoveAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SMoveAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SCardAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SCardAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SCardAsync(System.String,System.Threading.CancellationToken)
  name: SCardAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SCardAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SCardAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SCardAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SCardAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SIsMemberAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SIsMemberAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SIsMemberAsync(System.String,System.String,System.Threading.CancellationToken)
  name: SIsMemberAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SIsMemberAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SIsMemberAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SIsMemberAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SIsMemberAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: SInterAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SInterAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SInterAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SInterAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SInterAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterStoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterStoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: SInterStoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SInterStoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SInterStoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SInterStoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SInterStoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: SUnionAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SUnionAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SUnionAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SUnionAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SUnionAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionStoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionStoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: SUnionStoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SUnionStoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SUnionStoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SUnionStoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SUnionStoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: SDiffAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SDiffAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SDiffAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SDiffAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SDiffAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffStoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffStoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SDiffStoreAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: SDiffStoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SDiffStoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SDiffStoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SDiffStoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SDiffStoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRandMemberAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRandMemberAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.SRandMemberAsync(System.String,System.Threading.CancellationToken)
  name: SRandMemberAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.SRandMemberAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.SRandMemberAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).SRandMemberAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).SRandMemberAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZAddAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  name: ZAddAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZAddAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZAddAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZAddAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZAddAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemAsync(System.String,System.String,System.Threading.CancellationToken)
  name: ZRemAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZIncrByAsync(System.String,System.Double,System.String,System.Threading.CancellationToken)
  name: ZIncrByAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZIncrByAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZIncrByAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZIncrByAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZIncrByAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRankAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRankAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRankAsync(System.String,System.String,System.Threading.CancellationToken)
  name: ZRankAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRankAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRankAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRankAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRankAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRankAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRankAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRankAsync(System.String,System.String,System.Threading.CancellationToken)
  name: ZRevRankAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRankAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRankAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRankAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRankAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRangeAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeAsync
- uid: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
  commentId: T:System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<IEnumerable<string>>
  nameWithType: ValueTask<IEnumerable<string>>
  fullName: System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<string>>
  nameWithType.vb: ValueTask(Of IEnumerable(Of String))
  fullName.vb: System.Threading.Tasks.ValueTask(Of System.Collections.Generic.IEnumerable(Of String))
  name.vb: ValueTask(Of IEnumerable(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeWithScoresAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeWithScoresAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRangeWithScoresAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeWithScoresAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeWithScoresAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeWithScoresAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeWithScoresAsync
- uid: System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult}}
  commentId: T:System.Threading.Tasks.ValueTask{System.Collections.Generic.IEnumerable{Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<IEnumerable<CSortedSetResult>>
  nameWithType: ValueTask<IEnumerable<CSortedSetResult>>
  fullName: System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult>>
  nameWithType.vb: ValueTask(Of IEnumerable(Of CSortedSetResult))
  fullName.vb: System.Threading.Tasks.ValueTask(Of System.Collections.Generic.IEnumerable(Of Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult))
  name.vb: ValueTask(Of IEnumerable(Of CSortedSetResult))
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult
    name: CSortedSetResult
    href: Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult
    name: CSortedSetResult
    href: Cathay.SDK.Cloud.Interface.Redis.CSortedSetResult.html
  - name: )
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRevRangeAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeWithScoresAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeWithScoresAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeWithScoresAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRevRangeWithScoresAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeWithScoresAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeWithScoresAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeWithScoresAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeWithScoresAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRangeByScoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRangeByScoreWithScoresAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreWithScoresAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByScoreWithScoresAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreWithScoresAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByScoreWithScoresAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRevRangeByScoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRevRangeByScoreWithScoresAsync(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRevRangeByScoreWithScoresAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreWithScoresAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRevRangeByScoreWithScoresAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreWithScoresAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRevRangeByScoreWithScoresAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByRankAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByRankAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByRankAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRemRangeByRankAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByRankAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByRankAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByRankAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByRankAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByScoreAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  name: ZRemRangeByScoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByScoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByScoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByScoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByScoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCardAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCardAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCardAsync(System.String,System.Threading.CancellationToken)
  name: ZCardAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZCardAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZCardAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZCardAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZCardAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCountAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCountAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZCountAsync(System.String,System.Double,System.Double,System.Threading.CancellationToken)
  name: ZCountAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZCountAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZCountAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZCountAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZCountAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZScoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZScoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZScoreAsync(System.String,System.String,System.Threading.CancellationToken)
  name: ZScoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZScoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZScoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZScoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZScoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZUnionStoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZUnionStoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZUnionStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: ZUnionStoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZUnionStoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZUnionStoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZUnionStoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZUnionStoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZInterStoreAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZInterStoreAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZInterStoreAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: ZInterStoreAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZInterStoreAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZInterStoreAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZInterStoreAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZInterStoreAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByLexAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByLexAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRangeByLexAsync(System.String,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  name: ZRangeByLexAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByLexAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRangeByLexAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByLexAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRangeByLexAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZLexCountAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZLexCountAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZLexCountAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name: ZLexCountAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZLexCountAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZLexCountAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZLexCountAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZLexCountAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByLexAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByLexAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.ZRemRangeByLexAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name: ZRemRangeByLexAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByLexAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.ZRemRangeByLexAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByLexAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).ZRemRangeByLexAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name: HSetAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HSetAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HSetAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HSetAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HSetAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetNXAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetNXAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HSetNXAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name: HSetNXAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HSetNXAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HSetNXAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HSetNXAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HSetNXAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)
  name: HIncrbyAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HIncrbyAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HIncrbyAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HIncrbyAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HIncrbyAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyFloatAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyFloatAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HIncrbyFloatAsync(System.String,System.String,System.Double,System.Threading.CancellationToken)
  name: HIncrbyFloatAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HIncrbyFloatAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HIncrbyFloatAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HIncrbyFloatAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HIncrbyFloatAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAsync(System.String,System.String,System.Threading.CancellationToken)
  name: HGetAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HGetAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HGetAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HGetAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HGetAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HMGetAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HMGetAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HMGetAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: HMGetAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HMGetAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HMGetAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HMGetAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HMGetAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HDelAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HDelAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HDelAsync(System.String,System.String,System.Threading.CancellationToken)
  name: HDelAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HDelAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HDelAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HDelAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HDelAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HExistsAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HExistsAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HExistsAsync(System.String,System.String,System.Threading.CancellationToken)
  name: HExistsAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HExistsAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HExistsAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HExistsAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HExistsAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HLenAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HLenAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HLenAsync(System.String,System.Threading.CancellationToken)
  name: HLenAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HLenAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HLenAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HLenAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HLenAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HKeysAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HKeysAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HKeysAsync(System.String,System.Threading.CancellationToken)
  name: HKeysAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HKeysAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HKeysAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HKeysAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HKeysAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HValsAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HValsAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HValsAsync(System.String,System.Threading.CancellationToken)
  name: HValsAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HValsAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HValsAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HValsAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HValsAsync
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAllAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAllAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.HGetAllAsync(System.String,System.Threading.CancellationToken)
  name: HGetAllAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.HGetAllAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.HGetAllAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).HGetAllAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).HGetAllAsync
- uid: System.Threading.Tasks.ValueTask{Cathay.SDK.Cloud.Interface.Redis.CHashEntry}
  commentId: T:System.Threading.Tasks.ValueTask{Cathay.SDK.Cloud.Interface.Redis.CHashEntry}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<CHashEntry>
  nameWithType: ValueTask<CHashEntry>
  fullName: System.Threading.Tasks.ValueTask<Cathay.SDK.Cloud.Interface.Redis.CHashEntry>
  nameWithType.vb: ValueTask(Of CHashEntry)
  fullName.vb: System.Threading.Tasks.ValueTask(Of Cathay.SDK.Cloud.Interface.Redis.CHashEntry)
  name.vb: ValueTask(Of CHashEntry)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: Cathay.SDK.Cloud.Interface.Redis.CHashEntry
    name: CHashEntry
    href: Cathay.SDK.Cloud.Interface.Redis.CHashEntry.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: Cathay.SDK.Cloud.Interface.Redis.CHashEntry
    name: CHashEntry
    href: Cathay.SDK.Cloud.Interface.Redis.CHashEntry.html
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.WatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: WatchAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.WatchAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.WatchAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).WatchAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).WatchAsync
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.UnWatchAsync*
  commentId: Overload:Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.UnWatchAsync
  href: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync-2.html#Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync`2.UnWatchAsync(System.Threading.CancellationToken)
  name: UnWatchAsync
  nameWithType: IRedisNativeClientAsync<TOrder, TSortType>.UnWatchAsync
  fullName: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync<TOrder, TSortType>.UnWatchAsync
  nameWithType.vb: IRedisNativeClientAsync(Of TOrder, TSortType).UnWatchAsync
  fullName.vb: Cathay.SDK.Cloud.Interface.Redis.IRedisNativeClientAsync(Of TOrder, TSortType).UnWatchAsync
